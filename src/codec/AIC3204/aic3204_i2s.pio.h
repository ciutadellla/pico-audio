// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// audio_i2s //
// --------- //

#define audio_i2s_wrap_target 0
#define audio_i2s_wrap 15
#define audio_i2s_pio_version 1

#define audio_i2s_offset_entry_point 15u

static const uint16_t audio_i2s_program_instructions[] = {
            //     .wrap_target
    0x6801, //  0: out    pins, 1         side 1
    0xa842, //  1: nop                    side 1
    0x5801, //  2: in     pins, 1         side 3
    0x1840, //  3: jmp    x--, 0          side 3
    0x6001, //  4: out    pins, 1         side 0
    0xa042, //  5: nop                    side 0
    0x5001, //  6: in     pins, 1         side 2
    0xf02e, //  7: set    x, 14           side 2
    0x6001, //  8: out    pins, 1         side 0
    0xa042, //  9: nop                    side 0
    0x5001, // 10: in     pins, 1         side 2
    0x1048, // 11: jmp    x--, 8          side 2
    0x6801, // 12: out    pins, 1         side 1
    0xa842, // 13: nop                    side 1
    0x5801, // 14: in     pins, 1         side 3
    0xf82e, // 15: set    x, 14           side 3
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program audio_i2s_program = {
    .instructions = audio_i2s_program_instructions,
    .length = 16,
    .origin = -1,
    .pio_version = audio_i2s_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config audio_i2s_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + audio_i2s_wrap_target, offset + audio_i2s_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

  // clang-format on
  static inline void audio_i2s_program_init(PIO pio, uint sm, uint offset, uint data_in_pin, uint data_out_pin,
                                            uint clock_pin_base) {
    pio_sm_config sm_config = audio_i2s_program_get_default_config(offset);
    sm_config_set_out_pins(&sm_config, data_out_pin, 1);
    sm_config_set_in_pins(&sm_config, data_in_pin);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, 32);
    sm_config_set_in_shift(&sm_config, false, true, 32);
    pio_sm_init(pio, sm, offset, &sm_config);
    uint pin_dirs = (0u << data_in_pin) | (1u << data_out_pin) | (3u << clock_pin_base);
    uint pin_mask = (1u << data_in_pin) | (1u << data_out_pin) | (3u << clock_pin_base);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_dirs, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins
    hw_set_bits(&pio->input_sync_bypass, 1 << (data_in_pin));
    pio_sm_exec(pio, sm, pio_encode_jmp(offset + audio_i2s_offset_entry_point));
  }
  // clang-format off

#endif

